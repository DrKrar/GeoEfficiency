{
    "docs": [
        {
            "location": "/Guid/", 
            "text": "GeoEfficiency: Accurate Geometrical Efficiency Calculator\n\n\nAn officially registered Julia program that provides a set of tools to calculate the geometrical efficiency in a fast and accurate way.  The Package models a radiation detector irradiated by a radioactive source.  The Package relay directly on numerical evaluation of closed form analytical formula describing the geometrical efficiency.\n\n\n\n\n\n\n\n\nAuthor\n\n\nMohamed E. Krar\n (DrKrar@gmail.com)\n\n\n\n\n\n\n\n\n\n\nRepository\n\n\nGitHub.com\n\n\n\n\n\n\nDocumentation\n\n\nGitHub.io\n\n\n\n\n\n\nCurrent version\n\n\nv\"0.9.4-dev\"\n\n\n\n\n\n\nFirst Created\n\n\nFri Aug 14 20:12:01 2015\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThis documentation is also available in \nPDF\n format.\n\n\n\n\n\n\nCurrent/Planed Features\n\n\nThe following list show the state of current feature and planed feature. the checked items represent already present feature.\n\n\n\n\n\n\n[x] support of widely used detector geometries.\n\n\n\n\n[x] \ncylinder\n detectors.\n\n\n[x] \nbore-hole\n detectors.\n\n\n[x] \nwell-type\n detectors.\n\n\n[ ] support of specialized detector geometries.\n\n\n\n\n\n\n\n\n[x] support of isotropic radioactive sources.\n\n\n\n\n[x] \npoint\n sources.\n\n\n[x] \ndisc\n sources.\n\n\n[x] \ncylinder\n sources.\n\n\n\n\n[ ] support of anisotropic radioactive sources.\n\n\n\n\n\n\n[ ] \npoint\n sources.\n\n\n\n\n\n\n[ ] consider more details of the measurement setup.\n\n\n\n\n\n\n[ ] the detector effect.\n\n\n\n\n[ ] the end cap effect.\n\n\n[ ] the medium and absorber effect.\n\n\n[ ] combine the effect of the source geometry and composition.\n\n\n\n\n\n\n\n\n\n\nRequirements\n\n\n\n\nJulia 1.1 or above.\n\n\nQuadGK 2.0.2 or above, will be installed automatically during the package Installation.\n\n\n\n\n\n\nDownload/Installation\n\n\nGetting the GeoEfficiency package to work involves two steps: \n\n\n\n\n1. Installing Julia Language\n\n\nJust head over to the Julia language \ndownload page\n and choose the suitable binary for your platform to download and install.  At the end of this step you should be able to run julia from your system. \n\n\n\n\nNote\n\n\nHead to \nJuliaBox.com\n to run julia in your browser without any local installation.\n\n\n\n\n\n\n2. Installing Package\n\n\nGeoEfficiency is registered officially and so the latest stable release can be installed through the Julia package management system just by typing the following into the julia REPL prompt.\n\n\njulia\n import Pkg\njulia\n Pkg.add(\nGeoEfficiency\n) \n\n\n\n\n\n\nQuick Usage\n\n\nAfter installing the package, you can load it to your current workspace by typing the following:\n\n\njulia\n using GeoEfficiency\n\n\n\n\nNow the package is available to use, try typing:\n\n\njulia\n calc()\n\n\n\n\nsee also: \ngeoEff()\n, \ncalcN()\n, \nbatch()\n\n\n\n\nUnit Test\n\n\nFor scientific calculation accuracy in calculation and being error free is a highly demanded objective. Thus, the package is extensively tested method-wise in each supported operating system. Operating system fully supported include Windows, Linus, Apple OSx.\n\n\nAfter installing the package can be tested in your own system by typing the following into the REPL prompt.\n\n\njulia\n using Test, Pkg\njulia\n Pkg.test(\nGeoEfficiency\n) \n\n\n\n\n\n\nPackage Overview\n\n\nThe following constructor can be used to construct a specific type of detector \n\n\n\n\nCylDetector\n for cylindrical detector,\n\n\nBoreDetector\n for bore hole,\n\n\nWellDetector\n for well type detector.\n\n\n\n\nWhile the function \nDetector\n can be used to construct any of the above types. You may try also \ngetDetectors\n.\n\n\nPoint\n constructor is used to construct an anchoring point of a source. relative to source anchoring point the source position is specified. For a point source, the anchoring point is the source itself.  The \nsource()\n method take input from the 'console' and return a tuple describing the source.\n\n\nThe efficiency calculation can be done by one of the functions: \n\n\n\n\ngeoEff\n used with or without argument(s),\n\n\ncalc\n ask for the required information from the 'console',\n\n\ncalcN\n just a repeat of the \ncalc\n function\n\n\nbatch()\n which try to take required information from csv files located in   the home directory inside a folder called \nGeoEfficiency\n.\n\n\n\n\nFor more on the function and its methods prefix the name of the function by \n?\n.\n\n\n\n\nNote\n\n\nInput from the 'console' can be numerical expression not just a number. \n5/2\n ; \n5//2\n ; \npi\n ; \n\u03c0/2\n ; \nexp(2)\n ; \n1E-2\n ; \n5.2/3\n ; \nsin(1)\n ;  \nsin(1)^2\n are all valid expressions.\n\n\n\n\n\n\nBatch Calculation\n\n\nThe package can be used to perform batch calculations by calling one of the  methods of the function \nbatch\n. The output results of batch calculations is  found by default in \nGeoEfficiency\\results\n folder inside the user home directory.\n\n\nFor example  \nc:\\users\\yourusername\\GeoEfficiency\\results\\\n.\n\n\nThe function \nbatch()\n can be called with or without arrangement(s).  The without argument version relay on previously prepared Comma Saved  Values  [CSV] files, that can be easily edit by Microsoft Excel, located by default  in the \nGeoEfficiency\n folder.\n\n\nThose Comma Saved Values [CSV] files are:-\n\n\n\n\n\n\nDetectors.csv\n contains the detectors description (\na detector per line\n); The line format is: \n\n\nCrystal_Radius | Crystal_Length | Hole_Radius | Hole_Depth |\n  ---------------| ---------------|-------------|----------- |\n\n  * \nsrcHeights.csv\n contains the source heights; \n\n\nSource_Heights | \n  ---------------|\n\n  * \nsrcRhos.csv\n contains the source off-axis distances;                        \n\n\nSource_Rhos | \n  ------------|\n\n  * \nsrcRadii.csv\n contains the source radii for disc and cylindrical sources;             \n\n\nSource_Radii| \n  ------------|\n\n  * \nsrcLengths.csv\n contains the source length for cylindrical sources;    \n\n\nSource_Lengths| \n  --------------|\n\n\n\n\n\n\n\n\nNote\n\n\nFor Comma Saved Values [CSV] files each line represent an entry, the first line is always treated as the header.\n\n\n\n\n\n\nWarning\n\n\nThe program expect each line to contain one number for all CSV files except for \nDetectors.csv\n each line should contain at least one number or at most four separated numbers", 
            "title": "Home"
        }, 
        {
            "location": "/Guid/#geoefficiency-accurate-geometrical-efficiency-calculator", 
            "text": "An officially registered Julia program that provides a set of tools to calculate the geometrical efficiency in a fast and accurate way.  The Package models a radiation detector irradiated by a radioactive source.  The Package relay directly on numerical evaluation of closed form analytical formula describing the geometrical efficiency.     Author  Mohamed E. Krar  (DrKrar@gmail.com)      Repository  GitHub.com    Documentation  GitHub.io    Current version  v\"0.9.4-dev\"    First Created  Fri Aug 14 20:12:01 2015      Note  This documentation is also available in  PDF  format.", 
            "title": "GeoEfficiency: Accurate Geometrical Efficiency Calculator"
        }, 
        {
            "location": "/Guid/#currentplaned-features", 
            "text": "The following list show the state of current feature and planed feature. the checked items represent already present feature.    [x] support of widely used detector geometries.   [x]  cylinder  detectors.  [x]  bore-hole  detectors.  [x]  well-type  detectors.  [ ] support of specialized detector geometries.     [x] support of isotropic radioactive sources.   [x]  point  sources.  [x]  disc  sources.  [x]  cylinder  sources.   [ ] support of anisotropic radioactive sources.    [ ]  point  sources.    [ ] consider more details of the measurement setup.    [ ] the detector effect.   [ ] the end cap effect.  [ ] the medium and absorber effect.  [ ] combine the effect of the source geometry and composition.", 
            "title": "Current/Planed Features"
        }, 
        {
            "location": "/Guid/#requirements", 
            "text": "Julia 1.1 or above.  QuadGK 2.0.2 or above, will be installed automatically during the package Installation.", 
            "title": "Requirements"
        }, 
        {
            "location": "/Guid/#downloadinstallation", 
            "text": "Getting the GeoEfficiency package to work involves two steps:", 
            "title": "Download/Installation"
        }, 
        {
            "location": "/Guid/#1-installing-julia-language", 
            "text": "Just head over to the Julia language  download page  and choose the suitable binary for your platform to download and install.  At the end of this step you should be able to run julia from your system.    Note  Head to  JuliaBox.com  to run julia in your browser without any local installation.", 
            "title": "1. Installing Julia Language"
        }, 
        {
            "location": "/Guid/#2-installing-package", 
            "text": "GeoEfficiency is registered officially and so the latest stable release can be installed through the Julia package management system just by typing the following into the julia REPL prompt.  julia  import Pkg\njulia  Pkg.add( GeoEfficiency )", 
            "title": "2. Installing Package"
        }, 
        {
            "location": "/Guid/#quick-usage", 
            "text": "After installing the package, you can load it to your current workspace by typing the following:  julia  using GeoEfficiency  Now the package is available to use, try typing:  julia  calc()  see also:  geoEff() ,  calcN() ,  batch()", 
            "title": "Quick Usage"
        }, 
        {
            "location": "/Guid/#unit-test", 
            "text": "For scientific calculation accuracy in calculation and being error free is a highly demanded objective. Thus, the package is extensively tested method-wise in each supported operating system. Operating system fully supported include Windows, Linus, Apple OSx.  After installing the package can be tested in your own system by typing the following into the REPL prompt.  julia  using Test, Pkg\njulia  Pkg.test( GeoEfficiency )", 
            "title": "Unit Test"
        }, 
        {
            "location": "/Guid/#package-overview", 
            "text": "The following constructor can be used to construct a specific type of detector    CylDetector  for cylindrical detector,  BoreDetector  for bore hole,  WellDetector  for well type detector.   While the function  Detector  can be used to construct any of the above types. You may try also  getDetectors .  Point  constructor is used to construct an anchoring point of a source. relative to source anchoring point the source position is specified. For a point source, the anchoring point is the source itself.  The  source()  method take input from the 'console' and return a tuple describing the source.  The efficiency calculation can be done by one of the functions:    geoEff  used with or without argument(s),  calc  ask for the required information from the 'console',  calcN  just a repeat of the  calc  function  batch()  which try to take required information from csv files located in   the home directory inside a folder called  GeoEfficiency .   For more on the function and its methods prefix the name of the function by  ? .   Note  Input from the 'console' can be numerical expression not just a number.  5/2  ;  5//2  ;  pi  ;  \u03c0/2  ;  exp(2)  ;  1E-2  ;  5.2/3  ;  sin(1)  ;   sin(1)^2  are all valid expressions.", 
            "title": "Package Overview"
        }, 
        {
            "location": "/Guid/#batch-calculation", 
            "text": "The package can be used to perform batch calculations by calling one of the  methods of the function  batch . The output results of batch calculations is  found by default in  GeoEfficiency\\results  folder inside the user home directory.  For example   c:\\users\\yourusername\\GeoEfficiency\\results\\ .  The function  batch()  can be called with or without arrangement(s).  The without argument version relay on previously prepared Comma Saved  Values  [CSV] files, that can be easily edit by Microsoft Excel, located by default  in the  GeoEfficiency  folder.  Those Comma Saved Values [CSV] files are:-    Detectors.csv  contains the detectors description ( a detector per line ); The line format is:   Crystal_Radius | Crystal_Length | Hole_Radius | Hole_Depth |\n  ---------------| ---------------|-------------|----------- | \n  *  srcHeights.csv  contains the source heights;   Source_Heights | \n  ---------------| \n  *  srcRhos.csv  contains the source off-axis distances;                          Source_Rhos | \n  ------------| \n  *  srcRadii.csv  contains the source radii for disc and cylindrical sources;               Source_Radii| \n  ------------| \n  *  srcLengths.csv  contains the source length for cylindrical sources;      Source_Lengths| \n  --------------|     Note  For Comma Saved Values [CSV] files each line represent an entry, the first line is always treated as the header.    Warning  The program expect each line to contain one number for all CSV files except for  Detectors.csv  each line should contain at least one number or at most four separated numbers", 
            "title": "Batch Calculation"
        }, 
        {
            "location": "/manual/GeoEfficiency/", 
            "text": "Summery\n\n\n#\n\n\nGeoEfficiency.about\n \n \nFunction\n.\n\n\n *************************************************\n **            -=) GeoEfficiency (=-             **\n **  Accurate Geometrical Efficiency Calculator  **\n **   First Created on Fri Aug 14 20:12:01 2015  **\n *************************************************\n\n Author:        Mohamed E. Krar,  @e-mail: DrKrar@gmail.com \n Auth_Profile:  https://www.researchgate.net/profile/Mohamed_Krar3\n Repository:    https://github.com/DrKrar/GeoEfficiency.jl/\n Version:       v\n0.9.4-dev\n - (1 day old master)  \n Documentation: https://GeoEfficiency.GitHub.io/dev/index.html\n PDF_Manual:    https://GeoEfficiency.GitHub.io/dev/GeoEfficiency.jl.pdf\n\n\n\nBatch Mode Calculations \n-  read files by defaul from directory `/home/GeoEfficiency`\n-  save results by default to directory `/home/GeoEfficiency/results`\n\nfor more information see `batch`, `batchInfo`.\n\n\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.GeoEfficiency\n \n \nModule\n.\n\n\nGeoEfficiency Package\n\n\nintroduce a fast and flexible tool to calculate in batch or individually the \ngeometrical efficiency\n  for a set of common radiation detectors shapes (cylindrical,Bore-hole, Well-type) as seen form  a source. The source can be a point, a disc or even a cylinder.\n\n\nQuick Usage\n\n\n\n\ngeoEff()    : Calculate the geometrical efficiency for one geometrical setup return only the value of the geometrical efficiency.\n\n\ncalc()  : Calculate the geometrical efficiency for one geometrical setup and display full information on the console.\n\n\ncalcN() : Calculate the geometrical efficiency for geometrical setup(s) and display full information on the console until the user quit.\n\n\nbatch() : Calculate the geometrical efficiency using data in the \n/home/GeoEfficiency\n folder in batch mode.\n\n\n\n\n\n\nNote\n\n\nfor more information and updates refer to the repository at \nGitHub.com\n\n\n\n\nsource", 
            "title": "About"
        }, 
        {
            "location": "/manual/GeoEfficiency/#summery", 
            "text": "#  GeoEfficiency.about     Function .   *************************************************\n **            -=) GeoEfficiency (=-             **\n **  Accurate Geometrical Efficiency Calculator  **\n **   First Created on Fri Aug 14 20:12:01 2015  **\n *************************************************\n\n Author:        Mohamed E. Krar,  @e-mail: DrKrar@gmail.com \n Auth_Profile:  https://www.researchgate.net/profile/Mohamed_Krar3\n Repository:    https://github.com/DrKrar/GeoEfficiency.jl/\n Version:       v 0.9.4-dev  - (1 day old master)  \n Documentation: https://GeoEfficiency.GitHub.io/dev/index.html\n PDF_Manual:    https://GeoEfficiency.GitHub.io/dev/GeoEfficiency.jl.pdf\n\n\n\nBatch Mode Calculations \n-  read files by defaul from directory `/home/GeoEfficiency`\n-  save results by default to directory `/home/GeoEfficiency/results`\n\nfor more information see `batch`, `batchInfo`.  source  #  GeoEfficiency.GeoEfficiency     Module .  GeoEfficiency Package  introduce a fast and flexible tool to calculate in batch or individually the  geometrical efficiency   for a set of common radiation detectors shapes (cylindrical,Bore-hole, Well-type) as seen form  a source. The source can be a point, a disc or even a cylinder.  Quick Usage   geoEff()    : Calculate the geometrical efficiency for one geometrical setup return only the value of the geometrical efficiency.  calc()  : Calculate the geometrical efficiency for one geometrical setup and display full information on the console.  calcN() : Calculate the geometrical efficiency for geometrical setup(s) and display full information on the console until the user quit.  batch() : Calculate the geometrical efficiency using data in the  /home/GeoEfficiency  folder in batch mode.    Note  for more information and updates refer to the repository at  GitHub.com   source", 
            "title": "Summery"
        }, 
        {
            "location": "/manual/Physics_Model/", 
            "text": "Physics Model\n\n\nGeometrical efficiency of radioactive source measurement is a type of detection efficiency. A fully describe a radioactive source measurement at the most basic level three component should be provided. \n\n\n\n\nradioactive detector description\n\n\nradiation source description\n\n\nrelative position of the source to detector.\n\n\n\n\nthis section will discus how to instruct the program to construct each of the aforementioned component.\n\n\n\n\nDetector\n\n\nCurrently, only cylindrical-like types of detectors are supported.  \n\n\n\n\nCylindrical Detector\n\n\nTo construct a \ncylinder\n detector type \nCylDetector(CryRadius, CryLength)\n\n\n#\n\n\nGeoEfficiency.CylDetector\n \n \nType\n.\n\n\nCylDetector(CryRadius::Real, CryLength::Real)\n\n\n\n\nconstruct and return a \ncylindrical\n detector of the given crystal dimensions:-\n\n\n\n\nCryRadius\n : the detector crystal radius.\n\n\nCryLength\n : the detector crystal length.\n\n\n\n\n\n\nInvalid Arguments\n\n\nboth \nCryRadius\n and \nCryLength\n should be \npositive\n, while \nCryLength\n can also be set to \nzero\n.\n\n\n\n\nsource\n\n\nTo construct a planer \ncylinder\n  detector or \nDisc\n \nCylDetector(CryRadius)\n\n\n#\n\n\nGeoEfficiency.CylDetector\n \n \nMethod\n.\n\n\nCylDetector(CryRadius::Real)\n\n\n\n\nconstruct and return a \ncylindrical\n (really \ndisk\n) detector with crystal length equal to \nzero\n.\n\n\nsee also:\n \nCylDetector(CryRadius::Real, CryLength::Real)\n.\n\n\nsource\n\n\nuser may also just type \nCylDetector()\n to enter dimension from the console.\n\n\n#\n\n\nGeoEfficiency.CylDetector\n \n \nMethod\n.\n\n\nCylDetector()\n\n\n\n\nconstruct and return a \ncylindrical\n detector according to the input from the \nconsole\n.\n\n\nsee also:\n \nCylDetector(CryRadius::Real, CryLength::Real)\n.\n\n\nsource\n\n\n\n\nNote\n\n\nthe position of the source is reported relative to the detector anchoring point,  for a cylinder detector it is taking as a point in the plain surface nearest to the source  which lies on the detector axis of symmetry.\n\n\n\n\n\n\nBore-hole Detector\n\n\nTo construct a bore-hole detector type \nBoreDetector(CryRadius, CryLength, HoleRadius)\n. \n\n\n#\n\n\nGeoEfficiency.BoreDetector\n \n \nType\n.\n\n\nBoreDetector(CryRadius::Real, CryLength::Real, HoleRadius::Real)\n\n\n\n\nconstruct and return a \nbore-hole\n detector of the given crystal dimensions:-\n\n\n\n\nCryRadius\n : the detector crystal radius.\n\n\nCryLength\n : the detector crystal length.\n\n\nHoleRadius\n : the detector hole radius.\n\n\n\n\n\n\nInvalid Arguments\n\n\nCryRadius\n and \nCryLength\n, \nHoleRadius\n should be \npositive\n numbers, also  \nCryRadius\n should be greater than \nHoleRadius\n.\n\n\n\n\nsource\n\n\nuser may also just type \nBoreDetector()\n to enter dimension from the console.\n\n\n#\n\n\nGeoEfficiency.BoreDetector\n \n \nMethod\n.\n\n\nBoreDetector()\n\n\n\n\nconstruct and return a \nbore-hole\n detector according to the input from the \nconsole\n.\n\n\nsee also:\n \nBoreDetector(CryRadius::Real, CryLength::Real, HoleRadius::Real)\n.\n\n\nsource\n\n\n\n\nNote\n\n\nthe position of the source is reported relative to the detector anchoring point,  for a bore-hole detector it is taking as the middle point of its axis of symmetry.\n\n\n\n\n\n\nWell-type Detector\n\n\n#\n\n\nGeoEfficiency.WellDetector\n \n \nType\n.\n\n\nWellDetector(CryRadius::Real, CryLength::Real, HoleRadius::Real, HoleDepth::Real)\n\n\n\n\nconstruct and return a \nWell-Type\n detector of the given crystal dimensions:-\n\n\n\n\nCryRadius\n : the detector crystal radius.\n\n\nCryLength\n : the detector crystal length.\n\n\nHoleRadius\n : the detector hole radius.\n\n\nHoleDepth\n : the detector hole length.\n\n\n\n\n\n\nInvalid Arguments\n\n\nall arguments should be \npositive\n numbers, also  \nCryRadius\n should be greater than \nHoleRadius\n and  \nCryLength\n should be greater than  \nHoleDepth\n.\n\n\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.WellDetector\n \n \nMethod\n.\n\n\nWellDetector()\n\n\n\n\nconstruct and return a Well-Type detector according to the input from the \nconsole\n.\n\n\nsee also:\n \nWellDetector(CryRadius::Real, CryLength::Real, HoleRadius::Real, HoleDepth::Real)\n.\n\n\nsource\n\n\n\n\nNote\n\n\nthe position of the source is reported relative to the detector anchoring point,  for well-type detector it is taking as the point detector hole surface that  lies on the detector axis of symmetry.\n\n\n\n\n\n\nNote\n\n\nto let the program determine the detector type as well as dimension just type \nDetector()\n\n\n\n\n\n\nSource\n\n\n#\n\n\nGeoEfficiency.source\n \n \nFunction\n.\n\n\nsource(anchorPnt::Point = Point())\n\n\n\n\nreturn a tuple that describe the source (\nanchorPnt\n, \nSrcRadius\n, \nSrcLength\n) according to  the input from the \nconsole\n.\n\n\n\n\nanchorPnt\n : the source anchoring point. if it is missing the user is prompt   to input it via the \nconsole\n.\n\n\nSrcRadius\n : source radius.\n\n\nSrcLength\n : source length.\n\n\n\n\n\n\nPoint/Cylinder Source\n\n\n\n\nif source type set to point source, both `SrcRadius` and `SrcLength` are set to zero. \nfor more information **see also:** [`typeofSrc()`](@ref) and [`typeofSrc(x::Int)`](@ref).\n\n\n\n\nsource\n\n\n\n\nSource Anchoring Point\n\n\n#\n\n\nGeoEfficiency.Point\n \n \nType\n.\n\n\nPoint(Height::Real, Rho::Real)\n\n\n\n\nconstruct and return a \nPoint\n source. The \nPoint\n can be used as either a source by itself or an \nanchor point\n of a higher dimension source.\n\n\n\n\nHeight\n : point height relative to the detector surface.\n\n\nRho\n : point off-axis relative to the detector axis of symmetry.\n\n\n\n\n\n\nInterpretation of \nHeight\n\n\nEach detector type give different interpretation to the \nHeight\n as follow:-\n\n\n\n\nfor \nCylDetector\n the point source \nheight\n is consider to be measured   from the detector \nface surface\n.\n\n\nfor \nBoreDetector\n the point source \nheight\n is consider to be measured   from the \ndetector middle\n, +ve value are above the detector center while -ve are below.\n\n\nfor \nWellDetector\n the point source \nheight\n is considered to be measured   from the detector \nhole surface\n.\n\n\n\n\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.Point\n \n \nMethod\n.\n\n\nPoint(Height::Real)\n\n\n\n\nconstruct and return an \naxial point\n.\n\n\nsee also:\n \nPoint(Height::Real, Rho::Real)\n.\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.Point\n \n \nMethod\n.\n\n\nPoint()\n\n\n\n\nconstruct and return a \npoint\n. prompt to input information via the \nconsole\n. \n\n\nsee also:\n \nPoint(Height::Real, Rho::Real)\n.\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.Point\n \n \nMethod\n.\n\n\nPoint(xHeight::Real, aPnt::Point)\n\n\n\n\nconstruct and return a \npoint\n that has the same off-axis distance as \naPnt\n but of new  height \nxHeight\n. \n\n\nsee also:\n \nPoint(Height::Real, Rho::Real)\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.Point\n \n \nMethod\n.\n\n\nPoint(aPnt::Point, xRho::Real)\n\n\n\n\nconstruct and return a \npoint\n that has the same height as \naPnt\n but of new  off-axis distance \nRho\n. \n\n\nsee also:\n \nPoint(Height::Real, Rho::Real)\n.\n\n\nsource", 
            "title": "Physics Model"
        }, 
        {
            "location": "/manual/Physics_Model/#physics-model", 
            "text": "Geometrical efficiency of radioactive source measurement is a type of detection efficiency. A fully describe a radioactive source measurement at the most basic level three component should be provided.    radioactive detector description  radiation source description  relative position of the source to detector.   this section will discus how to instruct the program to construct each of the aforementioned component.", 
            "title": "Physics Model"
        }, 
        {
            "location": "/manual/Physics_Model/#detector", 
            "text": "Currently, only cylindrical-like types of detectors are supported.", 
            "title": "Detector"
        }, 
        {
            "location": "/manual/Physics_Model/#cylindrical-detector", 
            "text": "To construct a  cylinder  detector type  CylDetector(CryRadius, CryLength)  #  GeoEfficiency.CylDetector     Type .  CylDetector(CryRadius::Real, CryLength::Real)  construct and return a  cylindrical  detector of the given crystal dimensions:-   CryRadius  : the detector crystal radius.  CryLength  : the detector crystal length.    Invalid Arguments  both  CryRadius  and  CryLength  should be  positive , while  CryLength  can also be set to  zero .   source  To construct a planer  cylinder   detector or  Disc   CylDetector(CryRadius)  #  GeoEfficiency.CylDetector     Method .  CylDetector(CryRadius::Real)  construct and return a  cylindrical  (really  disk ) detector with crystal length equal to  zero .  see also:   CylDetector(CryRadius::Real, CryLength::Real) .  source  user may also just type  CylDetector()  to enter dimension from the console.  #  GeoEfficiency.CylDetector     Method .  CylDetector()  construct and return a  cylindrical  detector according to the input from the  console .  see also:   CylDetector(CryRadius::Real, CryLength::Real) .  source   Note  the position of the source is reported relative to the detector anchoring point,  for a cylinder detector it is taking as a point in the plain surface nearest to the source  which lies on the detector axis of symmetry.", 
            "title": "Cylindrical Detector"
        }, 
        {
            "location": "/manual/Physics_Model/#bore-hole-detector", 
            "text": "To construct a bore-hole detector type  BoreDetector(CryRadius, CryLength, HoleRadius) .   #  GeoEfficiency.BoreDetector     Type .  BoreDetector(CryRadius::Real, CryLength::Real, HoleRadius::Real)  construct and return a  bore-hole  detector of the given crystal dimensions:-   CryRadius  : the detector crystal radius.  CryLength  : the detector crystal length.  HoleRadius  : the detector hole radius.    Invalid Arguments  CryRadius  and  CryLength ,  HoleRadius  should be  positive  numbers, also   CryRadius  should be greater than  HoleRadius .   source  user may also just type  BoreDetector()  to enter dimension from the console.  #  GeoEfficiency.BoreDetector     Method .  BoreDetector()  construct and return a  bore-hole  detector according to the input from the  console .  see also:   BoreDetector(CryRadius::Real, CryLength::Real, HoleRadius::Real) .  source   Note  the position of the source is reported relative to the detector anchoring point,  for a bore-hole detector it is taking as the middle point of its axis of symmetry.", 
            "title": "Bore-hole Detector"
        }, 
        {
            "location": "/manual/Physics_Model/#well-type-detector", 
            "text": "#  GeoEfficiency.WellDetector     Type .  WellDetector(CryRadius::Real, CryLength::Real, HoleRadius::Real, HoleDepth::Real)  construct and return a  Well-Type  detector of the given crystal dimensions:-   CryRadius  : the detector crystal radius.  CryLength  : the detector crystal length.  HoleRadius  : the detector hole radius.  HoleDepth  : the detector hole length.    Invalid Arguments  all arguments should be  positive  numbers, also   CryRadius  should be greater than  HoleRadius  and   CryLength  should be greater than   HoleDepth .   source  #  GeoEfficiency.WellDetector     Method .  WellDetector()  construct and return a Well-Type detector according to the input from the  console .  see also:   WellDetector(CryRadius::Real, CryLength::Real, HoleRadius::Real, HoleDepth::Real) .  source   Note  the position of the source is reported relative to the detector anchoring point,  for well-type detector it is taking as the point detector hole surface that  lies on the detector axis of symmetry.    Note  to let the program determine the detector type as well as dimension just type  Detector()", 
            "title": "Well-type Detector"
        }, 
        {
            "location": "/manual/Physics_Model/#source", 
            "text": "#  GeoEfficiency.source     Function .  source(anchorPnt::Point = Point())  return a tuple that describe the source ( anchorPnt ,  SrcRadius ,  SrcLength ) according to  the input from the  console .   anchorPnt  : the source anchoring point. if it is missing the user is prompt   to input it via the  console .  SrcRadius  : source radius.  SrcLength  : source length.    Point/Cylinder Source   if source type set to point source, both `SrcRadius` and `SrcLength` are set to zero. \nfor more information **see also:** [`typeofSrc()`](@ref) and [`typeofSrc(x::Int)`](@ref).  source", 
            "title": "Source"
        }, 
        {
            "location": "/manual/Physics_Model/#source-anchoring-point", 
            "text": "#  GeoEfficiency.Point     Type .  Point(Height::Real, Rho::Real)  construct and return a  Point  source. The  Point  can be used as either a source by itself or an  anchor point  of a higher dimension source.   Height  : point height relative to the detector surface.  Rho  : point off-axis relative to the detector axis of symmetry.    Interpretation of  Height  Each detector type give different interpretation to the  Height  as follow:-   for  CylDetector  the point source  height  is consider to be measured   from the detector  face surface .  for  BoreDetector  the point source  height  is consider to be measured   from the  detector middle , +ve value are above the detector center while -ve are below.  for  WellDetector  the point source  height  is considered to be measured   from the detector  hole surface .    source  #  GeoEfficiency.Point     Method .  Point(Height::Real)  construct and return an  axial point .  see also:   Point(Height::Real, Rho::Real) .  source  #  GeoEfficiency.Point     Method .  Point()  construct and return a  point . prompt to input information via the  console .   see also:   Point(Height::Real, Rho::Real) .  source  #  GeoEfficiency.Point     Method .  Point(xHeight::Real, aPnt::Point)  construct and return a  point  that has the same off-axis distance as  aPnt  but of new  height  xHeight .   see also:   Point(Height::Real, Rho::Real)  source  #  GeoEfficiency.Point     Method .  Point(aPnt::Point, xRho::Real)  construct and return a  point  that has the same height as  aPnt  but of new  off-axis distance  Rho .   see also:   Point(Height::Real, Rho::Real) .  source", 
            "title": "Source Anchoring Point"
        }, 
        {
            "location": "/manual/Calculations/", 
            "text": "Calculations\n\n\ncalculation of the geometrical efficiency can be done via a call to the function \ngeoEff\n.\n\n\n#\n\n\nGeoEfficiency.geoEff\n \n \nFunction\n.\n\n\ngeoEff(detector::Detector, aPnt::Point, SrcRadius::Real = 0.0, SrcLength::Real = 0.0)::Float64\n\n\n\n\nreturn the \ngeometrical efficiency\n for a source (\npoint\n, \ndisk\n or \ncylinder\n) with  the detector \ndetector\n. \n\n\nArguments\n\n\n\n\ndetector\n can be any of the leaf detectors types (\nCylDetector\n, \nBoreDetector\n, \nWellDetector\n).\n\n\naPNT\n: a point represent the anchoring point of the source.\n\n\nSrcRadius\n: Radius of the source.\n\n\nsrcHeight\n:  the height of an upright cylinder source.\n\n\n\n\nThrow\n\n\n\n\nan \nInValidGeometry\n if the point location is invalide.\n\n\nan \nNotImplementedError\n if source-to-detector geometry not supported yet.\n\n\n\n\n\n\nWarning\n\n\nthe point height of \naPnt\n is measured differently for different detectors types. for the details, please refer to each detector entry.\n\n\n\n\n\n\nNote\n\n\n\n\nif \nSrcLength\n equal to \nzero\n; the method return Geometrical Efficiency of a disc   source of Radius = \nSrcRadius\n and center at the point \naPNT\n.\n\n\nif both \nSrcRadius\n and \nSrcLength\n equal to \nzero\n;   the method returns the Geometrical Efficiency of a point source at the anchoring point.\n\n\n\n\n\n\nExample\n\n\n\n\nto obtain the efficiency of a \ncylindrical\n detector of crystal radius \n2.0\n cm for axial    source cylinder of radius \n1.0\n cm and height \n2.5\n cm on the detector surface.\n\n\n\n\njulia\n using GeoEfficiency\n\njulia\n geoEff(CylDetector(2.0), Point(0.0), 1.0, 2.5)\n0.2923777934922748\n\n\n\n\n\n\nto obtain the efficiency for a \nbore-hole\n detector of crystal radius of \n2.0\n and height of \n3.0\n with    hole radius of \n1.5\n cm for axial source cylinder of radius \n1.0\n cm and height \n2.5\n cm starting from detector center.\n\n\n\n\njulia\n using GeoEfficiency\n\njulia\n newDet = BoreDetector(2.0, 3.0, 1.5);\n\njulia\n geoEff(newDet, Point(0.0), 1.0, 2.5)\n0.5678174038944723\n\n\n\n\n\n\nto obtain the efficiency for a \nwell-type\n detector of crystal radius of \n2.0\n cm and    height \n3.0\n cm with hole radius of \n1.5\n cm and depth of \n1.0\n cm for axial source cylinder of    radius \n1.0\n cm and height \n2.5\n cm at the hole surface.\n\n\n\n\njulia\n using GeoEfficiency\n\njulia\n newDet = WellDetector(2.0, 3.0, 1.5, 1.0);\n\njulia\n geoEff(newDet, Point(0.0), 1.0, 2.5)\n0.4669614527701105\n\n\n\n\nsource\n\n\n\n\nInformation\n\n\nthe function has another method \ngeoEff()\n that prompt the user to input a source and a detector via the \nconsole\n.", 
            "title": "Calculations"
        }, 
        {
            "location": "/manual/Calculations/#calculations", 
            "text": "calculation of the geometrical efficiency can be done via a call to the function  geoEff .  #  GeoEfficiency.geoEff     Function .  geoEff(detector::Detector, aPnt::Point, SrcRadius::Real = 0.0, SrcLength::Real = 0.0)::Float64  return the  geometrical efficiency  for a source ( point ,  disk  or  cylinder ) with  the detector  detector .   Arguments   detector  can be any of the leaf detectors types ( CylDetector ,  BoreDetector ,  WellDetector ).  aPNT : a point represent the anchoring point of the source.  SrcRadius : Radius of the source.  srcHeight :  the height of an upright cylinder source.   Throw   an  InValidGeometry  if the point location is invalide.  an  NotImplementedError  if source-to-detector geometry not supported yet.    Warning  the point height of  aPnt  is measured differently for different detectors types. for the details, please refer to each detector entry.    Note   if  SrcLength  equal to  zero ; the method return Geometrical Efficiency of a disc   source of Radius =  SrcRadius  and center at the point  aPNT .  if both  SrcRadius  and  SrcLength  equal to  zero ;   the method returns the Geometrical Efficiency of a point source at the anchoring point.    Example   to obtain the efficiency of a  cylindrical  detector of crystal radius  2.0  cm for axial    source cylinder of radius  1.0  cm and height  2.5  cm on the detector surface.   julia  using GeoEfficiency\n\njulia  geoEff(CylDetector(2.0), Point(0.0), 1.0, 2.5)\n0.2923777934922748   to obtain the efficiency for a  bore-hole  detector of crystal radius of  2.0  and height of  3.0  with    hole radius of  1.5  cm for axial source cylinder of radius  1.0  cm and height  2.5  cm starting from detector center.   julia  using GeoEfficiency\n\njulia  newDet = BoreDetector(2.0, 3.0, 1.5);\n\njulia  geoEff(newDet, Point(0.0), 1.0, 2.5)\n0.5678174038944723   to obtain the efficiency for a  well-type  detector of crystal radius of  2.0  cm and    height  3.0  cm with hole radius of  1.5  cm and depth of  1.0  cm for axial source cylinder of    radius  1.0  cm and height  2.5  cm at the hole surface.   julia  using GeoEfficiency\n\njulia  newDet = WellDetector(2.0, 3.0, 1.5, 1.0);\n\njulia  geoEff(newDet, Point(0.0), 1.0, 2.5)\n0.4669614527701105  source   Information  the function has another method  geoEff()  that prompt the user to input a source and a detector via the  console .", 
            "title": "Calculations"
        }, 
        {
            "location": "/manual/Output_Interface/", 
            "text": "Output Interface\n\n\nCalculation of the geometrical efficiency can be run in one of two modes aside from using \ngeoEff\n,  the interactive/direct mode and the batch mode.\n\n\n\n\nInteractive/Direct Mode\n\n\n#\n\n\nGeoEfficiency.calc\n \n \nFunction\n.\n\n\ncalc(detector::Detector = Detector(), aSource::Tuple{Point, Float64, Float64,} = source())\n\n\n\n\ncalculate and display on the \nconsole\n the \ngeometrical efficiency\n of the  detector \ndetector\n for the tuple \naSource\n describing the source.\n\n\nThrow\n an  \ninValidGeometry\n if the source location is inappropriate.\n\n\nsee also:\n \ngeoEff(::Detector, ::Tuple{Point, Float64, Float64})\n\n\n\n\nMissing/No Argument(s)\n\n\nif source description \naSource\n alone or even both source description and detector \ndetect\n   are missing, the method prompt the user to complete the missing data via the \nconsole\n.\n\n\n\n\nsource\n\n\nfor repeated calculations.\n\n\n#\n\n\nGeoEfficiency.calcN\n \n \nFunction\n.\n\n\ncalcN()\n\n\n\n\ncalculate and display the \ngeometrical efficiency\n repeatedly.  Prompt the user to input a \ndetector\n and a \nsource\n from the \nconsole\n. Prompt the user \nrepeatedly\n until it exit (give a choice to use the same  detector or a new detector).\n\n\nsource\n\n\n\n\nBatch Mode\n\n\nUse \nbatch()\n to let the program inspect the excel files containing the required information and run the calculations.\n\n\n#\n\n\nGeoEfficiency.batch\n \n \nFunction\n.\n\n\nbatch()\n\n\n\n\nprovide batch calculation of the \ngeometrical efficiency\n based on the information provided  by the \nCSV\n files by default located in \n/home/travis/GeoEfficiency\n.\n\n\nresults are saved on a \nCSV\n  file(s) named after the detector(s). the \nCSV\n  file(s)  by default found in \n/home/travis/GeoEfficiency/results\n, also a log of the results are displayed on the \nconsole\n.\n\n\nfor more information on batch refer to \nbatchInfo\n.\n\n\nsource\n\n\nbatch(\n    detector::Detector,\n    srcHeights_array::Vector{S},\n    srcRhos_array::Vector{S}=[0.0],\n    srcRadii_array::Vector{S}=[0.0],\n    srcLengths_array::Vector{S}=[0.0],\n    ispoint::Bool=true\n    )::String   where S \n: Real\n\n\n\n\nprovide batch calculation of the \ngeometrical efficiency\n for the detector \ndetector\n.  results are saved on a \nCSV\n  file named after the detector.  the \nCSV\n  file by default found in \n/home/travis/GeoEfficiency/results\n. this method return the actual  path to the \nCSV\n file.  also a log of the results are displayed on the \nconsole\n.\n\n\n\n\nsrcHeights_array\n: list of source heights to feed to batch.\n\n\nsrcRhos_array\n: list of source off-axis distances to feed to batch.\n\n\nsrcRadii_array\n: list of source radii to feed to batch.\n\n\nsrcLengths_array\n: list of source lengths to feed to batch.\n\n\n\n\nA set of sources is constructed of every valid \ncombination\n of parameter in the \nsrcRhos_array\n, \nsrcRadii_array\n and \nsrcLengths_array\n arrays with conjunction with \nispoint\n.\n\n\n\n\npoint/cylinder source\n\n\n\n\nIf \nispoint\n is \ntrue\n (the default) the source type is a point source and the parameters   in \nsrcRadii_array\n and \nsrcLengths_array\n arrays is completely ignored.\n\n\nIf \nispoint\n is \nfalse\n the parameters in srcRhos_array is completely ignored.\n\n\n\n\n\n\nsource\n\n\nbatch( \n    detectors_array::Vector{\n: Detector},\n    srcHeights_array::Vector{S},\n    srcRhos_array::Vector{S}=[0.0],\n    srcRadii_array::Vector{S}=[0.0],\n    srcLengths_array::Vector{S}=[0.0],\n    ispoint::Bool=true\n    )::Vector{String} where S \n: Real\n\n\n\n\nsame as \nbatch(::Detector, ::Vector{Real},::Vector{Real},::Vector{Real},::Vector{Real},::Bool)\n but accept a list of detectors \ndetectors_array\n. return a list of paths to the \nCSV\n of files (file for each detector) storing the results.\n\n\nsource\n\n\nbatch(\n    detector_info_array::Matrix{S},\n    srcHeights_array::Vector{S},\n    srcRhos_array::Vector{S}=[0.0],\n    srcRadii_array::Vector{S}=[0.0],\n    srcLengths_array::Vector{S}=[0.0],\n    ispoint::Bool=true\n    )::Vector{String}   where S \n: Real\n\n\n\n\nsame as \nbatch(::Vector{Detector}, ::Vector{Real},::Vector{Real},::Vector{Real},::Vector{Real},::Bool)\n but provide batch calculation of the  \ngeometrical efficiency\n for the detector in the \ndetector_info_array\n after applying \ngetDetectors\n. return a list of paths to the \nCSV\n of files (file for each detector) storing the results.\n\n\nsource\n\n\nAs mentioned above, the batch calculation controlled by CSV files. the following refer to information on the CSV files structure and location.\n\n\n#\n\n\nGeoEfficiency.batchInfo\n \n \nConstant\n.\n\n\nThe function \nbatch()\n can be called with or without arrangement(s).  The without argument version relay on previously prepared Comma Saved   Values [CSV] files, that can be easily edit by Microsoft Excel,  by default located in the directory \n/home/travis/GeoEfficiency\n .\n\n\nresults of batch calculation are saved on a \nCSV\n  file(s) named after the detector(s).  the \nCSV\n  file by default found in \n/home/travis/GeoEfficiency/results\n.\n\n\nCSV input files\n\n\n\n\nDetectors.csv\n contains the detectors description; The line format is:\n\n\n\n\n     Crystal_Radius | Crystal_Length | Hole_Radius | Hole_Depth |\n     ---------------| ---------------|-------------|----------- |\n\n\n\n\n\n\nsrcHeights.csv\n contains the source heights;\n\n\n\n\n     Source_Heights | \n     ---------------|\n\n\n\n\n\n\nsrcRhos.csv\n contains the source off-axis distances;\n\n\n\n\n     Source_Rhos | \n     ------------|\n\n\n\n\n\n\nsrcRadii.csv\n contains the source radii for disc and cylindrical sources;\n\n\n\n\n     Source_Radii| \n     ------------|\n\n\n\n\n\n\nsrcLengths.csv\n contains the source length for cylindrical sources;\n\n\n\n\n     Source_Lengths| \n     --------------|\n\n\n\n\nCSV results files\n\n\nCSV\n  file containing the results has columns of headers   \nAnchorHeight\n, \nAnchorRho\n, \nsrcRadius\n, \nsrcLength\n, \nGeoEfficiency\n for \nnon-point\n sources   and columns of headers \nHeight\n, \nRho\n, \nGeoEfficiency\n for \npoint\n sources.\n\n\n\n\nNote\n\n\nfor Comma Saved Values [CSV] files each line represent an entry,   the first line is always treated as the header.\n\n\n\n\n\n\nWarning\n\n\nthe program expect each line to contain one number for all CSV files except  for \nDetectors.csv\n each line should contain at least one number or at   most four separated numbers.\n\n\n\n\nsource\n\n\nThe result of the batch calculation is also displayed in the \nconsole\n. the function \nmax_batch(n::Real)\n can be used to give a hint (thus it may or may not apply) to the program to limit displayed results.\n\n\n#\n\n\nGeoEfficiency.max_batch\n \n \nMethod\n.\n\n\nmax_batch(n::Real)\n\n\n\n\nset the value of \n_max_batch\n which give a hint to the program on maximum number of entries per  detector displayed on the \nconsole\n in batch mode. This function \ndo not\n affect the saving of the batch calculation. \n\n\n\n\nNote\n\n\n\n\nNegative value will display prevent batch results from printed to the `console`. \nwhile `Inf` will print all  batch results to the `console`.\n\n\n\n\nsee also: \nmax_batch()\n\n\nsource\n\n\nAlso the without arguments \nmax_batch()\n restore back the default value.\n\n\n#\n\n\nGeoEfficiency.max_batch\n \n \nMethod\n.\n\n\nmax_batch()\n\n\n\n\nset the value of \n_max_batch\n which give a hint to the program on maximum number of entries per  detector displayed on the \nconsole\n in batch mode. to its default value set by the constant \nmax_display\n.\n\n\nsee also: \nmax_batch(n::Real)\n\n\nsource\n\n\nBefore the batch mode start  the user is asked to decide the source type. once the calculation is done the user can check the current setting for the source or modify it. for details see the next section.", 
            "title": "Output Interface"
        }, 
        {
            "location": "/manual/Output_Interface/#output-interface", 
            "text": "Calculation of the geometrical efficiency can be run in one of two modes aside from using  geoEff ,  the interactive/direct mode and the batch mode.", 
            "title": "Output Interface"
        }, 
        {
            "location": "/manual/Output_Interface/#interactivedirect-mode", 
            "text": "#  GeoEfficiency.calc     Function .  calc(detector::Detector = Detector(), aSource::Tuple{Point, Float64, Float64,} = source())  calculate and display on the  console  the  geometrical efficiency  of the  detector  detector  for the tuple  aSource  describing the source.  Throw  an   inValidGeometry  if the source location is inappropriate.  see also:   geoEff(::Detector, ::Tuple{Point, Float64, Float64})   Missing/No Argument(s)  if source description  aSource  alone or even both source description and detector  detect    are missing, the method prompt the user to complete the missing data via the  console .   source  for repeated calculations.  #  GeoEfficiency.calcN     Function .  calcN()  calculate and display the  geometrical efficiency  repeatedly.  Prompt the user to input a  detector  and a  source  from the  console . Prompt the user  repeatedly  until it exit (give a choice to use the same  detector or a new detector).  source", 
            "title": "Interactive/Direct Mode"
        }, 
        {
            "location": "/manual/Output_Interface/#batch-mode", 
            "text": "Use  batch()  to let the program inspect the excel files containing the required information and run the calculations.  #  GeoEfficiency.batch     Function .  batch()  provide batch calculation of the  geometrical efficiency  based on the information provided  by the  CSV  files by default located in  /home/travis/GeoEfficiency .  results are saved on a  CSV   file(s) named after the detector(s). the  CSV   file(s)  by default found in  /home/travis/GeoEfficiency/results , also a log of the results are displayed on the  console .  for more information on batch refer to  batchInfo .  source  batch(\n    detector::Detector,\n    srcHeights_array::Vector{S},\n    srcRhos_array::Vector{S}=[0.0],\n    srcRadii_array::Vector{S}=[0.0],\n    srcLengths_array::Vector{S}=[0.0],\n    ispoint::Bool=true\n    )::String   where S  : Real  provide batch calculation of the  geometrical efficiency  for the detector  detector .  results are saved on a  CSV   file named after the detector.  the  CSV   file by default found in  /home/travis/GeoEfficiency/results . this method return the actual  path to the  CSV  file.  also a log of the results are displayed on the  console .   srcHeights_array : list of source heights to feed to batch.  srcRhos_array : list of source off-axis distances to feed to batch.  srcRadii_array : list of source radii to feed to batch.  srcLengths_array : list of source lengths to feed to batch.   A set of sources is constructed of every valid  combination  of parameter in the  srcRhos_array ,  srcRadii_array  and  srcLengths_array  arrays with conjunction with  ispoint .   point/cylinder source   If  ispoint  is  true  (the default) the source type is a point source and the parameters   in  srcRadii_array  and  srcLengths_array  arrays is completely ignored.  If  ispoint  is  false  the parameters in srcRhos_array is completely ignored.    source  batch( \n    detectors_array::Vector{ : Detector},\n    srcHeights_array::Vector{S},\n    srcRhos_array::Vector{S}=[0.0],\n    srcRadii_array::Vector{S}=[0.0],\n    srcLengths_array::Vector{S}=[0.0],\n    ispoint::Bool=true\n    )::Vector{String} where S  : Real  same as  batch(::Detector, ::Vector{Real},::Vector{Real},::Vector{Real},::Vector{Real},::Bool)  but accept a list of detectors  detectors_array . return a list of paths to the  CSV  of files (file for each detector) storing the results.  source  batch(\n    detector_info_array::Matrix{S},\n    srcHeights_array::Vector{S},\n    srcRhos_array::Vector{S}=[0.0],\n    srcRadii_array::Vector{S}=[0.0],\n    srcLengths_array::Vector{S}=[0.0],\n    ispoint::Bool=true\n    )::Vector{String}   where S  : Real  same as  batch(::Vector{Detector}, ::Vector{Real},::Vector{Real},::Vector{Real},::Vector{Real},::Bool)  but provide batch calculation of the   geometrical efficiency  for the detector in the  detector_info_array  after applying  getDetectors . return a list of paths to the  CSV  of files (file for each detector) storing the results.  source  As mentioned above, the batch calculation controlled by CSV files. the following refer to information on the CSV files structure and location.  #  GeoEfficiency.batchInfo     Constant .  The function  batch()  can be called with or without arrangement(s).  The without argument version relay on previously prepared Comma Saved   Values [CSV] files, that can be easily edit by Microsoft Excel,  by default located in the directory  /home/travis/GeoEfficiency  .  results of batch calculation are saved on a  CSV   file(s) named after the detector(s).  the  CSV   file by default found in  /home/travis/GeoEfficiency/results .  CSV input files   Detectors.csv  contains the detectors description; The line format is:        Crystal_Radius | Crystal_Length | Hole_Radius | Hole_Depth |\n     ---------------| ---------------|-------------|----------- |   srcHeights.csv  contains the source heights;        Source_Heights | \n     ---------------|   srcRhos.csv  contains the source off-axis distances;        Source_Rhos | \n     ------------|   srcRadii.csv  contains the source radii for disc and cylindrical sources;        Source_Radii| \n     ------------|   srcLengths.csv  contains the source length for cylindrical sources;        Source_Lengths| \n     --------------|  CSV results files  CSV   file containing the results has columns of headers    AnchorHeight ,  AnchorRho ,  srcRadius ,  srcLength ,  GeoEfficiency  for  non-point  sources   and columns of headers  Height ,  Rho ,  GeoEfficiency  for  point  sources.   Note  for Comma Saved Values [CSV] files each line represent an entry,   the first line is always treated as the header.    Warning  the program expect each line to contain one number for all CSV files except  for  Detectors.csv  each line should contain at least one number or at   most four separated numbers.   source  The result of the batch calculation is also displayed in the  console . the function  max_batch(n::Real)  can be used to give a hint (thus it may or may not apply) to the program to limit displayed results.  #  GeoEfficiency.max_batch     Method .  max_batch(n::Real)  set the value of  _max_batch  which give a hint to the program on maximum number of entries per  detector displayed on the  console  in batch mode. This function  do not  affect the saving of the batch calculation.    Note   Negative value will display prevent batch results from printed to the `console`. \nwhile `Inf` will print all  batch results to the `console`.  see also:  max_batch()  source  Also the without arguments  max_batch()  restore back the default value.  #  GeoEfficiency.max_batch     Method .  max_batch()  set the value of  _max_batch  which give a hint to the program on maximum number of entries per  detector displayed on the  console  in batch mode. to its default value set by the constant  max_display .  see also:  max_batch(n::Real)  source  Before the batch mode start  the user is asked to decide the source type. once the calculation is done the user can check the current setting for the source or modify it. for details see the next section.", 
            "title": "Batch Mode"
        }, 
        {
            "location": "/manual/Input_Batch/", 
            "text": "Batch Mode Input\n\n\n#\n\n\nGeoEfficiency.typeofSrc\n \n \nFunction\n.\n\n\ntypeofSrc()::SrcType\n\n\n\n\nreturn the current value of the global \nGeoEfficiency.srcType\n.\n\n\nsource\n\n\ntypeofSrc(x::Int)::SrcType\n\n\n\n\nset and return the value of the global \nGeoEfficiency.srcType\n corresponding to \nx\n.\n\n\n\n\nsrcUnknown = -1 also any negative integer treated as so,\n\n\nsrcPoint   = 0,\n\n\nsrcLine    = 1,\n\n\nsrcDisk    = 2,\n\n\nsrcVolume  = 3,\n\n\nsrcNotPoint = 4 also any greater than 4 integer treated as so.\n\n\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.setSrcToPoint\n \n \nFunction\n.\n\n\nsetSrcToPoint()::Bool\n\n\n\n\nreturn whether the source type is a point or not.\n\n\nsource\n\n\nsetSrcToPoint(yes::Bool)::Bool\n\n\n\n\nreturn whether the source type is a point or not after setting \nsrcType\n to \nsrcPoint\n if  \nyes\n = \ntrue\n else if \nyes\n = \nfalse\n setting it to \nsrcNotPoint\n if it was not already  set to other non-point type (\nsrcDisk\n, \nsrcLine\n, \nsrcVolume\n).\n\n\n\n\nNote\n\n\n\n\nThe user can use this function to change the source type any time.\n\n\nThe source type is set the fist time asked for source.\n\n\n\n\n\n\nsee also:\n \ntypeofSrc(::Int)\n.\n\n\nsource\n\n\nsetSrcToPoint(prompt::AbstractString)::Bool\n\n\n\n\nreturn whether the source type is a point or not. only prompt the user to set the source  type if it were not already set before. \n\n\nsee also:\n \ntypeofSrc(::Int)\n, \nsetSrcToPoint(::Bool)\n.\n\n\nsource\n\n\n\n\nWarnning\n\n\nCurrently, the source type has no effect but to decide if the source is a point source or a higher dimension source.", 
            "title": "Input Batch"
        }, 
        {
            "location": "/manual/Input_Batch/#batch-mode-input", 
            "text": "#  GeoEfficiency.typeofSrc     Function .  typeofSrc()::SrcType  return the current value of the global  GeoEfficiency.srcType .  source  typeofSrc(x::Int)::SrcType  set and return the value of the global  GeoEfficiency.srcType  corresponding to  x .   srcUnknown = -1 also any negative integer treated as so,  srcPoint   = 0,  srcLine    = 1,  srcDisk    = 2,  srcVolume  = 3,  srcNotPoint = 4 also any greater than 4 integer treated as so.   source  #  GeoEfficiency.setSrcToPoint     Function .  setSrcToPoint()::Bool  return whether the source type is a point or not.  source  setSrcToPoint(yes::Bool)::Bool  return whether the source type is a point or not after setting  srcType  to  srcPoint  if   yes  =  true  else if  yes  =  false  setting it to  srcNotPoint  if it was not already  set to other non-point type ( srcDisk ,  srcLine ,  srcVolume ).   Note   The user can use this function to change the source type any time.  The source type is set the fist time asked for source.    see also:   typeofSrc(::Int) .  source  setSrcToPoint(prompt::AbstractString)::Bool  return whether the source type is a point or not. only prompt the user to set the source  type if it were not already set before.   see also:   typeofSrc(::Int) ,  setSrcToPoint(::Bool) .  source   Warnning  Currently, the source type has no effect but to decide if the source is a point source or a higher dimension source.", 
            "title": "Batch Mode Input"
        }, 
        {
            "location": "/manual/Development/", 
            "text": "Introduction\n\n\nThis section is provided for developer who are interested in extending the functionality of the \nGeoEfficiency\n package or just make use of some of its functionality. this software is licensed under the MIT license. \n\n\nMIT \nExpat\n License\n\n Copyright (c) 2019: Mohamed Krar.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \nSoftware\n), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software with an appropriate reference to \n the original work.\n\n THE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n\n\n\n\n\nConfiguration\n\n\nThe package contain many parameters that can be set within the program sourcecode. they can be found in the source file \nConfig.jl\n\n\n\n\n\n\n\n\nparameter\n\n\ndescription\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\ndataFolder\n\n\nname of the root directory\n\n\n\"GeoEfficiency\"\n\n\n\n\n\n\ndataDir\n\n\nroot directory\n\n\njoinpath(homedir(), dataFolder)\n\n\n\n\n\n\nintegrate\n\n\nuse the package \nQuadGK\n to perform integration\n\n\nbegin using QuadGK; QuadGK.quadgk; end\n\n\n\n\n\n\nrelativeError\n\n\n\n\n1.0E-4\n\n\n\n\n\n\nabsoluteError\n\n\n\n\neps(1.0)\n\n\n\n\n\n\nresultsFolder\n\n\nname of the result directory inside the root directory\n\n\n\"results\"\n\n\n\n\n\n\nmax_display\n\n\ndefine the default for maximum number of entries shown in the \nconsole\n in batch mode\n\n\n20 \nsee \nmax_batch\n\n\n\n\n\n\n\n\n\n\nError System\n\n\n#\n\n\nGeoEfficiency.GeoException\n \n \nType\n.\n\n\ncustom abstract \nException\n that is the parent of all Exception in the \nGeoEfficiency\n package\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.InValidDetectorDim\n \n \nType\n.\n\n\ncustom \nException\n indicating invalid radiation detector dimensions\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.@validateDetector\n \n \nMacro\n.\n\n\n@validateDetector cond [text]\n\n\n\n\nthrow an \nInValidDetectorDim\n if \ncond\n is \nfalse\n.  Message \ntext\n is optionally displayed upon validation failure.\n\n\nExamples\n\n\njulia\n @validateDetector iseven(3) \n3 is an odd number!\n\nERROR: InValidDetectorDim: 3 is an odd number!\n\njulia\n @validateDetector isodd(3) \nWhat even are numbers?\n\n\n\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.InValidGeometry\n \n \nType\n.\n\n\ncustom \nException\n indicating a not valid source to detector geometry\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.@inValidGeometry\n \n \nMacro\n.\n\n\n@inValidGeometry [msg]\n\n\n\n\ncustom macro to throw \nNotImplementedError\n \nException\n.\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.NotImplementedError\n \n \nType\n.\n\n\ncustom \nException\n indicating a source-to-detector geometry which may be valid but not implemented yet\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.@notImplementedError\n \n \nMacro\n.\n\n\n@notImplementedError [msg]\n\n\n\n\ncustom macro to throw \nNotImplementedError\n \nException\n.\n\n\nsource\n\n\n\n\nConsole Input\n\n\nJulia language is quite reach language but it seems a good idea thought to collect repeated tasks involving input from console in compact and customized to the need function. this section provide two essential functions to deal with inputs from the console. the first:\n\n\n#\n\n\nGeoEfficiency.input\n \n \nFunction\n.\n\n\nUnExported\n\n\ninput(prompt::AbstractString = \n?: \n, incolor::Symbol = :green)\n\n\n\n\nreturn a string represent the user respond delimited by new line excluding the new line. prompt the user with the massage \nprompt\n defaults to \n?\n.  wait until the user type its respond and press return.  \nincolor\n specify the prompt text color, default to $:green$ may take any of the values  \n:black\n, \n:blue\n, \n:cyan\n, \n:green\n, \n:light_black\n, \n:light_blue\n, \n:light_cyan\n, \n:light_green\n, \n:light_magenta\n, \n:light_red\n, \n:light_yellow\n, \n:magenta\n, \n:red\n, \n:white\n, or \n:yellow\n.\n\n\n\n\nColor\n\n\n\n\n    The effect of color is not allways respected in all teriminals as some color may be simplly \n    ignored by some teriminals.\n\n\n\n\nsource\n\n\nwhile the second is a more complex function:\n\n\n#\n\n\nGeoEfficiency.getfloat\n \n \nFunction\n.\n\n\nUnExported\n\n\ngetfloat(prompt::AbstractString = \n?: \n, from::Real = -Inf, to::Real = Inf; KW...)::Float64\n\n\n\n\nprompts the user with the massage \nprompt\n defaults to \n?:\n to input a numerical \nexpression\n  evaluate to a numerical value. check that the numerical value is in interval [\nfrom\n, \nto\n[ by default [-\u221e,    \u221e[ before returning it as a \nFloat64\n.  throws \nArgumentError\n when the given interval is not valid. if the numerical expression fail to evaluated to numerical value or the numerical value is not in the valid interval  the function will warn the user and \nreprompt\n him to give a valid expresion.\n\n\nKW arguments\n\n\n\n\nvalue::AbstractString\n=\"nothing\"\n : if provided the function will not ask for input from the   \nconsole\n and take it as if it where inputted from the  \nconsole\n [\nfor test propose mainly\n].\n\n\nlower::Bool\n=true\n : whether or not to inculde \nfrom\n as accepted value.\n\n\nupper::Bool\n=false\n : whether or not to inculde \nto\n as accepted value.\n\n\n\n\n\n\nNote\n\n\n\n\n    A blank input (i.e just a return) is considered as being `0.0`. \n    Input from the `console` can be numerical expression not just a number. \n    expression like ``5/2`` ; ``5//2`` ; ``pi`` ; ``\u03c0/2`` ; ``exp(2)`` ; ``1E-2 `` ; ``5.2/3`` ; \n    ``sin(1)`` ;  ``sin(1)^2`` are all valid expressions.\n\n\n\n\nExamples\n\n\njulia\n getfloat(\ninput a number:\n, value=\n3\n)\n3.0\n\njulia\n getfloat(\ninput a number:\n, value=\n)\n0.0\n\njulia\n getfloat(\ninput a number:\n, value=\n5/2\n)\n2.5\n\njulia\n getfloat(\ninput a number:\n, value=\n5//2\n)\n2.5\n\njulia\n getfloat(\ninput a number:\n, value=\npi\n)\n3.141592653589793\n\njulia\n getfloat(\ninput a number:\n, value=\n-2\n)\n-2.0\n\njulia\n getfloat(\ninput a number:\n, value=\nsin(1)^2\n)\n0.7080734182735712\n\njulia\n getfloat(\ninput a number:\n, 1, 5, value=\n5\n, upper=true)\n5.0\n\n\n\n\nsource\n\n\nThose function are not exported that is normally the user will not need to use them but they are documented here to allow a developer ranked user to make use of them.\n\n\n\n\nPhysics Model\n\n\nTwo abstract detector types defined in the package to classify the detectors, the top most super type,\n\n\n#\n\n\nGeoEfficiency.RadiationDetector\n \n \nType\n.\n\n\nabstract super-supertype of all detectors types\n\n\nsource\n\n\nany future detector definition should inherit from \nRadiationDetector\n. The second abstract detector   \nDetector\n is also a sub-type of \nRadiationDetector\n but it only accommodates cylindrical type only.\n\n\n#\n\n\nGeoEfficiency.Detector\n \n \nType\n.\n\n\nDetector\n\n\n\n\nabstract supertype of all detectors types of cylidericalish shapes. also can be used to construct any leaf type.\n\n\nsource\n\n\ncan be used to construct leaf detector.\n\n\n#\n\n\nGeoEfficiency.Detector\n \n \nMethod\n.\n\n\nDetector()\n\n\n\n\nconstruct and return an object of the \nDetector\n leaf types  (\nCylDetector\n, \nBoreDetector\n or \nWellDetector\n) according to the input from the console.\n\n\n\n\nNote\n\n\nall required information is acquired from the \nconsole\n and would warn user on invalid data.\n\n\n\n\nsource\n\n\nalso it can be used to construct a concrete detector depend on the provided arguments.\n\n\n#\n\n\nGeoEfficiency.Detector\n \n \nMethod\n.\n\n\nDetector(CryRadius::Real, CryLength::Real, HoleRadius::Real, HoleDepth::Real)\n\n\n\n\nconstruct and return \nwell-type\n, \nbore-hole\n or \ncylindrical\n detector according to the arguments.  it inspect the arguments and call the appropriate leaf type constructor.\n\n\n\n\nMissing Argument(s)\n\n\nif the value(s) of the last argument(s) is\u0007re \nzero\n, it acts as a missing argument(s).\n\n\n\n\nsee also:\n \nCylDetector\n, \nBoreDetector\n, \nWellDetector\n.\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.Detector\n \n \nMethod\n.\n\n\nDetector(CryRadius::Real)\n\n\n\n\nsame as \nCylDetector(CryRadius::Real)\n.\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.Detector\n \n \nMethod\n.\n\n\nDetector(CryRadius::Real, CryLength::Real)\n\n\n\n\nsame as \nCylDetector(CryRadius::Real, CryLength::Real)\n.\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.Detector\n \n \nMethod\n.\n\n\nDetector(CryRadius::Real, CryLength::Real, HoleRadius::Real)\n\n\n\n\nsame as \nBoreDetector(CryRadius::Real, CryLength::Real, HoleRadius::Real)\n except when \nHoleRadius\n = \n0.0\n it acts as  \nCylDetector(CryRadius::Real, CryLength::Real)\n.\n\n\nsource\n\n\n\n\nBatch Mode Input\n\n\n#\n\n\nGeoEfficiency.detector_info_from_csvFile\n \n \nFunction\n.\n\n\nUnExported\n\n\n detector_info_from_csvFile(detectors::AbstractString = Detectors, \n                                  datadir::AbstractString = dataDir)\n\n\n\n\nreturn a vector{Detector} based on information in the file of name \ndetectors\n found in the  directory \ndatadir\n.\n\n\n\n\nNote\n\n\n\n\nif no path is given the second argument \ndatadir\n is default to \n/home/travis/GeoEfficiency\n as set by   the constant \ndataDir\n.\n\n\nif no file name is specified the name of the predefined file \nDetectors.csv\n as set by   the constant \nDetectors\n.\n\n\nthe no argument method is the most useful; other methods are mainly for \ntest propose\n.\n\n\n\n\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.read_from_csvFile\n \n \nFunction\n.\n\n\nUnExported\n\n\nread_from_csvFile(csv_data::AbstractString, \n                   datadir::AbstractString = dataDir)::Vector{Float64}\n\n\n\n\nreturn Vector{Float64} based on data in csv file named \ncsv_data\n. directory \ndatadir\n point to    where the file is located default to $/home/travis/GeoEfficiency$ as set by the constant \ndataDir\n.\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.read_batch_info\n \n \nFunction\n.\n\n\nUnExported\n\n\nread_batch_info()\n\n\n\n\nread \ndetectors\n and \nsources\n parameters from the predefined csv files.\n\n\nReturn a tuple     (detectors\narray,        srcHeights\narray,       srcRhos\narray,      srcRadii\narray,         srcLengths\narray,       GeoEfficiency\nisPoint)\n\n\nsource\n\n\nUnExported\n\n\nread_batch_info(datadir::AbstractString,\n              detectors::AbstractString, \n             srcHeights::AbstractString,\n                srcRhos::AbstractString,\n               srcRadii::AbstractString,\n             srcLengths::AbstractString)\n\n\n\n\nread \ndetectors\n and \nsources\n parameters from the location given in the argument list.\n\n\nReturn a tuple\n\n\n   (detectors_array,\n    srcHeights_array,\n    srcRhos_array,\n    srcRadii_array,\n    srcLengths_array,\n    isPoint)\n\n\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.getDetectors\n \n \nFunction\n.\n\n\ngetDetectors(detectors_array::Vector{\n:Detector} = Detector[])::Vector{Detector}\n\n\n\n\nreturn the \ndetectors_array\n as Vector{Detector} extended by the entered detectors and sorted according to the  detector volume.  prompt the user to input detector parameters from the \nconsole\n.\n\n\n\n\nNote\n\n\nIf no array received in the input an empty array will be created to receive the converted detectors.\n\n\n\n\nsource\n\n\ngetDetectors(detector_info_array::Matrix{\n:Real}, \n                 detectors_array::Vector{\n:Detector} = Detector[]; \n                                           console_FB=true)::Vector{Detector}\n\n\n\n\nreturn \ndetectors_array\n as Vector{Detector}, after extending it with the successfully converted detectors. while,  attempt to convert detectors from the information in \ndetector_info_array\n. \n\n\n\n\nNote\n\n\nif \nconsole_FB\n argument is set to true , the function will call \ngetDetectors()\n to take input from the \nconsole\n if the \ndetector_info_array\n is empty or contain no numerical element.\n\n\n\n\nsource\n\n\n\n\nOutput Interface\n\n\n#\n\n\nGeoEfficiency.checkResultsDirs\n \n \nFunction\n.\n\n\nUnExported\n\n\ncheckResultsDirs()\n\n\n\n\nmake sure that directories for saving the results are already exist or create  them if necessary.\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.writecsv_head\n \n \nFunction\n.\n\n\nUnExported\n\n\nwritecsv_head(filename::AbstractString, content::VecOrMat{\n:Union{Int,Float64}}, head=[])\n\n\n\n\nWrite \ncontent\n to the comma delimited values file \nfilename\n.  optionally with header \nhead\n.\n\n\nsource\n\n\n#\n\n\nGeoEfficiency._max_batch\n \n \nConstant\n.\n\n\nGlobal variable that give a hint to the program on maxumam number of entries per detector displayed  on the \nconsole\n in btach mode.\n\n\n\n\nNote\n\n\n\n\nNegative value will display prevent batch results from printed to the `console`. \nwhile `Inf` will print all  batch results to the `console`.\n\n\n\n\nsource\n\n\n#\n\n\nGeoEfficiency.max_display\n \n \nConstant\n.\n\n\nset the default value for the global variable \n_max_batch\n\n\nsource\n\n\n#\n\n\nGeoEfficiency._batch\n \n \nFunction\n.\n\n\nUnExported\n\n\n_batch(\n    ::Val{true},\n    detector::Detector,\n    srcHeights_array::Vector{Float64},\n    srcRhos_array::Vector{Float64},\n    srcRadii_array::Vector{Float64},\n    srcLengths_array::Vector{Float64}\n    )\n\n\n\n\nbatch calculation for specialized for \npoint\n sources.  return a tuple of three arrays the \ndetector\n, the \nresults\nand the path of the \nCSV\n  file containing results. \n\n\nThe \nresults\n has columns of headers \nHeight\n, \nRho\n, \nGeoEfficiency\n.\n\n\n\n\nNote\n\n\nfor all arrays \nsrcHeights_array\n, \nsrcRhos_array\n, \nsrcRadii_array\n and \nsrcLengths_array\n   element type should be \nFloat64\n. if any of them have other numerical element type it   should converted to \nFloat64\n using \nfloat\n before passing it to this method.\n\n\n\n\n\n\nWarning\n\n\nboth \nsrcRadii_array\n, \nsrcLengths_array\n are completely ignored as this method is for point sources.\n\n\n\n\nsource\n\n\nUnExported\n\n\n_batch(\n    ::Val{false},\n    detector::Detector,\n    srcHeights_array::Vector{Float64},\n    srcRhos_array::Vector{Float64},\n    srcRadii_array::Vector{Float64},\n    srcLengths_array::Vector{Float64},\n    )\n\n\n\n\nbatch calculation for specialized for \nnon-point\n sources.  return a tuple of three arrays the \ndetector\n, the \nresults\nand the path of the \nCSV\n  file containing results. \n\n\nThe \nresults\n has columns of headers  \nAnchorHeight\n, \nAnchorRho\n, \nsrcRadius\n, \nsrcLength\n, \nGeoEfficiency\n.\n\n\n\n\nNote\n\n\nfor all arrays \nsrcHeights_array\n, \nsrcRhos_array\n, \nsrcRadii_array\n and \nsrcLengths_array\n  element type should be \nFloat64\n. if any of them have other numerical element type it  should converted to \nFloat64\n using \nfloat\n before passing it to this method.\n\n\n\n\nsource", 
            "title": "Development"
        }, 
        {
            "location": "/manual/Development/#introduction", 
            "text": "This section is provided for developer who are interested in extending the functionality of the  GeoEfficiency  package or just make use of some of its functionality. this software is licensed under the MIT license.   MIT  Expat  License\n\n Copyright (c) 2019: Mohamed Krar.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the  Software ), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software with an appropriate reference to \n the original work.\n\n THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.", 
            "title": "Introduction"
        }, 
        {
            "location": "/manual/Development/#configuration", 
            "text": "The package contain many parameters that can be set within the program sourcecode. they can be found in the source file  Config.jl     parameter  description  default value      dataFolder  name of the root directory  \"GeoEfficiency\"    dataDir  root directory  joinpath(homedir(), dataFolder)    integrate  use the package  QuadGK  to perform integration  begin using QuadGK; QuadGK.quadgk; end    relativeError   1.0E-4    absoluteError   eps(1.0)    resultsFolder  name of the result directory inside the root directory  \"results\"    max_display  define the default for maximum number of entries shown in the  console  in batch mode  20  see  max_batch", 
            "title": "Configuration"
        }, 
        {
            "location": "/manual/Development/#error-system", 
            "text": "#  GeoEfficiency.GeoException     Type .  custom abstract  Exception  that is the parent of all Exception in the  GeoEfficiency  package  source  #  GeoEfficiency.InValidDetectorDim     Type .  custom  Exception  indicating invalid radiation detector dimensions  source  #  GeoEfficiency.@validateDetector     Macro .  @validateDetector cond [text]  throw an  InValidDetectorDim  if  cond  is  false .  Message  text  is optionally displayed upon validation failure.  Examples  julia  @validateDetector iseven(3)  3 is an odd number! \nERROR: InValidDetectorDim: 3 is an odd number!\n\njulia  @validateDetector isodd(3)  What even are numbers?   source  #  GeoEfficiency.InValidGeometry     Type .  custom  Exception  indicating a not valid source to detector geometry  source  #  GeoEfficiency.@inValidGeometry     Macro .  @inValidGeometry [msg]  custom macro to throw  NotImplementedError   Exception .  source  #  GeoEfficiency.NotImplementedError     Type .  custom  Exception  indicating a source-to-detector geometry which may be valid but not implemented yet  source  #  GeoEfficiency.@notImplementedError     Macro .  @notImplementedError [msg]  custom macro to throw  NotImplementedError   Exception .  source", 
            "title": "Error System"
        }, 
        {
            "location": "/manual/Development/#console-input", 
            "text": "Julia language is quite reach language but it seems a good idea thought to collect repeated tasks involving input from console in compact and customized to the need function. this section provide two essential functions to deal with inputs from the console. the first:  #  GeoEfficiency.input     Function .  UnExported  input(prompt::AbstractString =  ?:  , incolor::Symbol = :green)  return a string represent the user respond delimited by new line excluding the new line. prompt the user with the massage  prompt  defaults to  ? .  wait until the user type its respond and press return.   incolor  specify the prompt text color, default to $:green$ may take any of the values   :black ,  :blue ,  :cyan ,  :green ,  :light_black ,  :light_blue ,  :light_cyan ,  :light_green ,  :light_magenta ,  :light_red ,  :light_yellow ,  :magenta ,  :red ,  :white , or  :yellow .   Color       The effect of color is not allways respected in all teriminals as some color may be simplly \n    ignored by some teriminals.  source  while the second is a more complex function:  #  GeoEfficiency.getfloat     Function .  UnExported  getfloat(prompt::AbstractString =  ?:  , from::Real = -Inf, to::Real = Inf; KW...)::Float64  prompts the user with the massage  prompt  defaults to  ?:  to input a numerical  expression   evaluate to a numerical value. check that the numerical value is in interval [ from ,  to [ by default [-\u221e,    \u221e[ before returning it as a  Float64 .  throws  ArgumentError  when the given interval is not valid. if the numerical expression fail to evaluated to numerical value or the numerical value is not in the valid interval  the function will warn the user and  reprompt  him to give a valid expresion.  KW arguments   value::AbstractString =\"nothing\"  : if provided the function will not ask for input from the    console  and take it as if it where inputted from the   console  [ for test propose mainly ].  lower::Bool =true  : whether or not to inculde  from  as accepted value.  upper::Bool =false  : whether or not to inculde  to  as accepted value.    Note       A blank input (i.e just a return) is considered as being `0.0`. \n    Input from the `console` can be numerical expression not just a number. \n    expression like ``5/2`` ; ``5//2`` ; ``pi`` ; ``\u03c0/2`` ; ``exp(2)`` ; ``1E-2 `` ; ``5.2/3`` ; \n    ``sin(1)`` ;  ``sin(1)^2`` are all valid expressions.  Examples  julia  getfloat( input a number: , value= 3 )\n3.0\n\njulia  getfloat( input a number: , value= )\n0.0\n\njulia  getfloat( input a number: , value= 5/2 )\n2.5\n\njulia  getfloat( input a number: , value= 5//2 )\n2.5\n\njulia  getfloat( input a number: , value= pi )\n3.141592653589793\n\njulia  getfloat( input a number: , value= -2 )\n-2.0\n\njulia  getfloat( input a number: , value= sin(1)^2 )\n0.7080734182735712\n\njulia  getfloat( input a number: , 1, 5, value= 5 , upper=true)\n5.0  source  Those function are not exported that is normally the user will not need to use them but they are documented here to allow a developer ranked user to make use of them.", 
            "title": "Console Input"
        }, 
        {
            "location": "/manual/Development/#physics-model", 
            "text": "Two abstract detector types defined in the package to classify the detectors, the top most super type,  #  GeoEfficiency.RadiationDetector     Type .  abstract super-supertype of all detectors types  source  any future detector definition should inherit from  RadiationDetector . The second abstract detector    Detector  is also a sub-type of  RadiationDetector  but it only accommodates cylindrical type only.  #  GeoEfficiency.Detector     Type .  Detector  abstract supertype of all detectors types of cylidericalish shapes. also can be used to construct any leaf type.  source  can be used to construct leaf detector.  #  GeoEfficiency.Detector     Method .  Detector()  construct and return an object of the  Detector  leaf types  ( CylDetector ,  BoreDetector  or  WellDetector ) according to the input from the console.   Note  all required information is acquired from the  console  and would warn user on invalid data.   source  also it can be used to construct a concrete detector depend on the provided arguments.  #  GeoEfficiency.Detector     Method .  Detector(CryRadius::Real, CryLength::Real, HoleRadius::Real, HoleDepth::Real)  construct and return  well-type ,  bore-hole  or  cylindrical  detector according to the arguments.  it inspect the arguments and call the appropriate leaf type constructor.   Missing Argument(s)  if the value(s) of the last argument(s) is\u0007re  zero , it acts as a missing argument(s).   see also:   CylDetector ,  BoreDetector ,  WellDetector .  source  #  GeoEfficiency.Detector     Method .  Detector(CryRadius::Real)  same as  CylDetector(CryRadius::Real) .  source  #  GeoEfficiency.Detector     Method .  Detector(CryRadius::Real, CryLength::Real)  same as  CylDetector(CryRadius::Real, CryLength::Real) .  source  #  GeoEfficiency.Detector     Method .  Detector(CryRadius::Real, CryLength::Real, HoleRadius::Real)  same as  BoreDetector(CryRadius::Real, CryLength::Real, HoleRadius::Real)  except when  HoleRadius  =  0.0  it acts as   CylDetector(CryRadius::Real, CryLength::Real) .  source", 
            "title": "Physics Model"
        }, 
        {
            "location": "/manual/Development/#batch-mode-input", 
            "text": "#  GeoEfficiency.detector_info_from_csvFile     Function .  UnExported   detector_info_from_csvFile(detectors::AbstractString = Detectors, \n                                  datadir::AbstractString = dataDir)  return a vector{Detector} based on information in the file of name  detectors  found in the  directory  datadir .   Note   if no path is given the second argument  datadir  is default to  /home/travis/GeoEfficiency  as set by   the constant  dataDir .  if no file name is specified the name of the predefined file  Detectors.csv  as set by   the constant  Detectors .  the no argument method is the most useful; other methods are mainly for  test propose .    source  #  GeoEfficiency.read_from_csvFile     Function .  UnExported  read_from_csvFile(csv_data::AbstractString, \n                   datadir::AbstractString = dataDir)::Vector{Float64}  return Vector{Float64} based on data in csv file named  csv_data . directory  datadir  point to    where the file is located default to $/home/travis/GeoEfficiency$ as set by the constant  dataDir .  source  #  GeoEfficiency.read_batch_info     Function .  UnExported  read_batch_info()  read  detectors  and  sources  parameters from the predefined csv files.  Return a tuple     (detectors array,        srcHeights array,       srcRhos array,      srcRadii array,         srcLengths array,       GeoEfficiency isPoint)  source  UnExported  read_batch_info(datadir::AbstractString,\n              detectors::AbstractString, \n             srcHeights::AbstractString,\n                srcRhos::AbstractString,\n               srcRadii::AbstractString,\n             srcLengths::AbstractString)  read  detectors  and  sources  parameters from the location given in the argument list.  Return a tuple     (detectors_array,\n    srcHeights_array,\n    srcRhos_array,\n    srcRadii_array,\n    srcLengths_array,\n    isPoint)  source  #  GeoEfficiency.getDetectors     Function .  getDetectors(detectors_array::Vector{ :Detector} = Detector[])::Vector{Detector}  return the  detectors_array  as Vector{Detector} extended by the entered detectors and sorted according to the  detector volume.  prompt the user to input detector parameters from the  console .   Note  If no array received in the input an empty array will be created to receive the converted detectors.   source  getDetectors(detector_info_array::Matrix{ :Real}, \n                 detectors_array::Vector{ :Detector} = Detector[]; \n                                           console_FB=true)::Vector{Detector}  return  detectors_array  as Vector{Detector}, after extending it with the successfully converted detectors. while,  attempt to convert detectors from the information in  detector_info_array .    Note  if  console_FB  argument is set to true , the function will call  getDetectors()  to take input from the  console  if the  detector_info_array  is empty or contain no numerical element.   source", 
            "title": "Batch Mode Input"
        }, 
        {
            "location": "/manual/Development/#output-interface", 
            "text": "#  GeoEfficiency.checkResultsDirs     Function .  UnExported  checkResultsDirs()  make sure that directories for saving the results are already exist or create  them if necessary.  source  #  GeoEfficiency.writecsv_head     Function .  UnExported  writecsv_head(filename::AbstractString, content::VecOrMat{ :Union{Int,Float64}}, head=[])  Write  content  to the comma delimited values file  filename .  optionally with header  head .  source  #  GeoEfficiency._max_batch     Constant .  Global variable that give a hint to the program on maxumam number of entries per detector displayed  on the  console  in btach mode.   Note   Negative value will display prevent batch results from printed to the `console`. \nwhile `Inf` will print all  batch results to the `console`.  source  #  GeoEfficiency.max_display     Constant .  set the default value for the global variable  _max_batch  source  #  GeoEfficiency._batch     Function .  UnExported  _batch(\n    ::Val{true},\n    detector::Detector,\n    srcHeights_array::Vector{Float64},\n    srcRhos_array::Vector{Float64},\n    srcRadii_array::Vector{Float64},\n    srcLengths_array::Vector{Float64}\n    )  batch calculation for specialized for  point  sources.  return a tuple of three arrays the  detector , the  results and the path of the  CSV   file containing results.   The  results  has columns of headers  Height ,  Rho ,  GeoEfficiency .   Note  for all arrays  srcHeights_array ,  srcRhos_array ,  srcRadii_array  and  srcLengths_array    element type should be  Float64 . if any of them have other numerical element type it   should converted to  Float64  using  float  before passing it to this method.    Warning  both  srcRadii_array ,  srcLengths_array  are completely ignored as this method is for point sources.   source  UnExported  _batch(\n    ::Val{false},\n    detector::Detector,\n    srcHeights_array::Vector{Float64},\n    srcRhos_array::Vector{Float64},\n    srcRadii_array::Vector{Float64},\n    srcLengths_array::Vector{Float64},\n    )  batch calculation for specialized for  non-point  sources.  return a tuple of three arrays the  detector , the  results and the path of the  CSV   file containing results.   The  results  has columns of headers   AnchorHeight ,  AnchorRho ,  srcRadius ,  srcLength ,  GeoEfficiency .   Note  for all arrays  srcHeights_array ,  srcRhos_array ,  srcRadii_array  and  srcLengths_array   element type should be  Float64 . if any of them have other numerical element type it  should converted to  Float64  using  float  before passing it to this method.   source", 
            "title": "Output Interface"
        }, 
        {
            "location": "/list/", 
            "text": "Index\n\n\n\n\nGeoEfficiency.GeoEfficiency\n\n\nGeoEfficiency._max_batch\n\n\nGeoEfficiency.batchInfo\n\n\nGeoEfficiency.max_display\n\n\nGeoEfficiency.BoreDetector\n\n\nGeoEfficiency.BoreDetector\n\n\nGeoEfficiency.CylDetector\n\n\nGeoEfficiency.CylDetector\n\n\nGeoEfficiency.CylDetector\n\n\nGeoEfficiency.Detector\n\n\nGeoEfficiency.Detector\n\n\nGeoEfficiency.Detector\n\n\nGeoEfficiency.Detector\n\n\nGeoEfficiency.Detector\n\n\nGeoEfficiency.Detector\n\n\nGeoEfficiency.GeoException\n\n\nGeoEfficiency.InValidDetectorDim\n\n\nGeoEfficiency.InValidGeometry\n\n\nGeoEfficiency.NotImplementedError\n\n\nGeoEfficiency.Point\n\n\nGeoEfficiency.Point\n\n\nGeoEfficiency.Point\n\n\nGeoEfficiency.Point\n\n\nGeoEfficiency.Point\n\n\nGeoEfficiency.RadiationDetector\n\n\nGeoEfficiency.WellDetector\n\n\nGeoEfficiency.WellDetector\n\n\nGeoEfficiency._batch\n\n\nGeoEfficiency.about\n\n\nGeoEfficiency.batch\n\n\nGeoEfficiency.calc\n\n\nGeoEfficiency.calcN\n\n\nGeoEfficiency.checkResultsDirs\n\n\nGeoEfficiency.detector_info_from_csvFile\n\n\nGeoEfficiency.geoEff\n\n\nGeoEfficiency.getDetectors\n\n\nGeoEfficiency.getfloat\n\n\nGeoEfficiency.input\n\n\nGeoEfficiency.max_batch\n\n\nGeoEfficiency.max_batch\n\n\nGeoEfficiency.read_batch_info\n\n\nGeoEfficiency.read_from_csvFile\n\n\nGeoEfficiency.setSrcToPoint\n\n\nGeoEfficiency.source\n\n\nGeoEfficiency.typeofSrc\n\n\nGeoEfficiency.writecsv_head\n\n\nGeoEfficiency.@inValidGeometry\n\n\nGeoEfficiency.@notImplementedError\n\n\nGeoEfficiency.@validateDetector", 
            "title": "Index"
        }, 
        {
            "location": "/list/#index", 
            "text": "GeoEfficiency.GeoEfficiency  GeoEfficiency._max_batch  GeoEfficiency.batchInfo  GeoEfficiency.max_display  GeoEfficiency.BoreDetector  GeoEfficiency.BoreDetector  GeoEfficiency.CylDetector  GeoEfficiency.CylDetector  GeoEfficiency.CylDetector  GeoEfficiency.Detector  GeoEfficiency.Detector  GeoEfficiency.Detector  GeoEfficiency.Detector  GeoEfficiency.Detector  GeoEfficiency.Detector  GeoEfficiency.GeoException  GeoEfficiency.InValidDetectorDim  GeoEfficiency.InValidGeometry  GeoEfficiency.NotImplementedError  GeoEfficiency.Point  GeoEfficiency.Point  GeoEfficiency.Point  GeoEfficiency.Point  GeoEfficiency.Point  GeoEfficiency.RadiationDetector  GeoEfficiency.WellDetector  GeoEfficiency.WellDetector  GeoEfficiency._batch  GeoEfficiency.about  GeoEfficiency.batch  GeoEfficiency.calc  GeoEfficiency.calcN  GeoEfficiency.checkResultsDirs  GeoEfficiency.detector_info_from_csvFile  GeoEfficiency.geoEff  GeoEfficiency.getDetectors  GeoEfficiency.getfloat  GeoEfficiency.input  GeoEfficiency.max_batch  GeoEfficiency.max_batch  GeoEfficiency.read_batch_info  GeoEfficiency.read_from_csvFile  GeoEfficiency.setSrcToPoint  GeoEfficiency.source  GeoEfficiency.typeofSrc  GeoEfficiency.writecsv_head  GeoEfficiency.@inValidGeometry  GeoEfficiency.@notImplementedError  GeoEfficiency.@validateDetector", 
            "title": "Index"
        }, 
        {
            "location": "/LICENSE/", 
            "text": "LICENSE\n\n\nThe GeoEfficiency.jl package is licensed under the MIT \"Expat\" License\n\n\nCopyright (c) 2019: \n\n\nMohamed E. Krar \n.\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software with an appropriate reference to \n the original work.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.", 
            "title": "LICENSE"
        }, 
        {
            "location": "/LICENSE/#license", 
            "text": "The GeoEfficiency.jl package is licensed under the MIT \"Expat\" License  Copyright (c) 2019:   Mohamed E. Krar  .  Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software with an appropriate reference to \n the original work.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.", 
            "title": "LICENSE"
        }
    ]
}